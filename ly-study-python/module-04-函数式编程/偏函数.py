# int()函数可以把字符串转换为整数，当仅传入字符串时，int()函数默认按十进制转换：
int('12345')

# 但int()函数还提供额外的base参数，默认值为10。如果传入base参数，就可以做N进制的转换：
int('12345', base=8)

# 假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，
# 于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：
def int2(x, base=2):
    return int(x, base)

# functools.partial就是帮助我们创建一个偏函数的，
# 不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2：
import functools
int_base_2 =  functools.partial(int, base=2)
print(int2('100')) # 上新的int2函数，仅仅是把base参数重新设定默认值为2，但也可以在函数调用时传入其他值

# ==================================================
# functools.partial:
#   把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。
# ============================================================
#                                                            =
#  ！当函数的某个参数是我们可以提前获知的 那我们就可以将它固定住  =
#                                                            =
# ============================================================

# 最后，创建偏函数时，实际上可以接收函数对象、*args和**kw这3个参数，当传入：
int2 = functools.partial(int, base=2) # 实际上固定了int函数的关键字base

# 相当于
kw = { 'base': 2 } 
int('10010', **kw)

# 会把10作为参数的一部分自动加入参数的左边 max2(5, 6, 7) 等于 args = (10, 5, 6, 7); max(*args);
max2 = functools.partial(max, 10)

